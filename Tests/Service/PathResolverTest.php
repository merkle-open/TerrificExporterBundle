<?php
namespace Terrific\ExporterBundle\Tests\Service {
    use Terrific\ExporterBundle\Service\PathResolver;
    use Terrific\ExporterBundle\Exception\PathResolveException;

    /**
     * Generated by PHPUnit_SkeletonGenerator on 2012-11-11 at 14:56:35.
     */
    class PathResolverTest extends \PHPUnit_Framework_TestCase
    {
        /**
         * @var PathResolver
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
            $this->object = new PathResolver();
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
        }

        /**
         * @covers Terrific\ExporterBundle\Service\PathResolver::getPathTemplate
         */
        public function testGetPathTemplate()
        {
            $this->object->setPathTemplate(array('TEST' => ''));

            $pathTemplate = $this->object->getPathTemplate();
            $this->assertSame($pathTemplate["TEST"], "");
        }

        /**
         * Test cleanPath function.
         *
         * @covers Terrific\ExporterBundle\Service\PathResolver::cleanPath
         */
        public function testCleanPath()
        {
            //
            // Test Absolute Path
            //
            $testPath = "http://www.google.de/asdf/bbb/asdf/testfile.mp3?length=113";
            $result = "http://www.google.de/asdf/bbb/asdf/testfile.mp3";

            $this->assertEquals(
                $result,
                $this->object->cleanPath($testPath),
                "Absolute Path's failed to clean"
            );

            //
            // Test Relative Path
            //
            $testPath = "../asdf/bbb/dddd/file.mp4?asdf=;asdf";
            $result = "../asdf/bbb/dddd/file.mp4";

            $this->assertEquals(
                $result,
                $this->object->cleanPath($testPath),
                "Relative Path's failed to clean"
            );

        }

        /**
         * @covers Terrific\ExporterBundle\Service\PathResolver::getModuleName
         */
        public function testGetModuleName()
        {
            $this->object->setModules(array("Test123"));

            $path = "/src/Terrific/Module/Test123/blubb/blubb.file";
            $this->assertEquals(
                "Test123",
                $this->object->getModuleName($path),
                "Cannot resolve modulename for path ['${path}']"
            );

            $path = "/wrong/path/here.file";
            $this->assertNull(
                $this->object->getModuleName($path),
                "Wrong modulename for path ['${path}']"
            );

            $path = "/terrificmoduletest123/blubb.file";
            $this->assertEquals(
                "Test123",
                $this->object->getModuleName($path),
                "Cannot resolve modulename for path ['${path}']"
            );

            try {
                $path = "/terrificmoduleexceptionmodule/xXx.file";
                $this->object->getModuleName($path);

                $this->fail("No exception thrown !");
            } catch (PathResolveException $expected) {
            }
        }

        /**
         * @covers Terrific\ExporterBundle\Service\PathResolver::getType
         */
        public function testGetType()
        {
            //
            // Checking type javascript
            //
            $file = "http://www.google.de/asdf/file.js";
            $this->assertEquals(
                PathResolver::TYPE_JS,
                $this->object->getType($file),
                "Check TYPE_JS failed"
            );

            //
            // Checking type stylesheet
            //
            $file = "/projects/localpath/file.css";
            $this->assertEquals(
                PathResolver::TYPE_CSS,
                $this->object->getType($file),
                "Check TYPE_CSS failed"
            );

            //
            // Checking type view
            //
            $file = "test.html";
            $this->assertEquals(
                PathResolver::TYPE_VIEW,
                $this->object->getType($file),
                "Check TYPE_VIEW failed"
            );

            //
            // Checking type font
            //
            $file = "font1.woff";
            $this->assertEquals(
                PathResolver::TYPE_FONT,
                $this->object->getType($file),
                "Check TYPE_FONT ['woff'] failed"
            );

            $file = "font1.eot";
            $this->assertEquals(
                PathResolver::TYPE_FONT,
                $this->object->getType($file),
                "Check TYPE_FONT ['eot'] failed"
            );

            $file = "font1.ttf";
            $this->assertEquals(
                PathResolver::TYPE_FONT,
                $this->object->getType($file),
                "Check TYPE_FONT ['ttf'] failed"
            );

            //
            // Checking type
            //
            $file = "font1.png";
            $this->assertEquals(
                PathResolver::TYPE_IMAGE,
                $this->object->getType($file),
                "Check TYPE_FONT ['png'] failed"
            );

            $file = "font1.gif";
            $this->assertEquals(
                PathResolver::TYPE_IMAGE,
                $this->object->getType($file),
                "Check TYPE_FONT ['gif'] failed"
            );

            $file = "font1.jpg";
            $this->assertEquals(
                PathResolver::TYPE_IMAGE,
                $this->object->getType($file),
                "Check TYPE_FONT ['jpg'] failed"
            );
        }

        /**
         * @covers Terrific\ExporterBundle\Service\PathResolver::isValidModule
         */
        public function testIsValidModule()
        {
            $this->object->setModules(array('Test'));

            $this->assertTrue($this->object->isValidModule("Test"), "Check valid Module on match");
            $this->assertTrue($this->object->isValidModule("Test", true), "Check valid Module on match with matchOnLower Option");

            $this->assertTrue($this->object->isValidModule("test", true), "Check valid Module on lowermatch if written lowercase");
            $this->assertFalse($this->object->isValidModule("test", false), "Check valid Module on lowermatch if written camelcased");

            $this->object->setModules(array());
            $this->assertFalse($this->object->isValidModule("Test"), "Check valid Module on match with empty module list");
            $this->assertFalse($this->object->isValidModule("Test", true), "Check valid Module on match with matchOnLower Option with empty module list");

            $this->assertFalse($this->object->isValidModule("test", true), "Check valid Module on lowermatch if written lowercase with empty module list");
            $this->assertFalse($this->object->isValidModule("test", false), "Check valid Module on lowermatch if written camelcased with empty module list");
        }

        /**
         * @covers Terrific\ExporterBundle\Service\PathResolver::getScope
         */
        public function testGetScope()
        {
            $this->object->setModules(array('Test'));

            $path = "/terrificmoduletest/file.mpg";
            $this->assertEquals(
                PathResolver::SCOPE_MODULE,
                $this->object->getScope($path),
                "Check SCOPE_MODULE ['${path}']"
            );

            $path = "../src/Terrific/Module/Test/file.mpg";
            $this->assertEquals(
                PathResolver::SCOPE_MODULE,
                $this->object->getScope($path),
                "Check SCOPE_MODULE ['${path}']"
            );

            $path = "/muh/macht/die/kuh/milch.resource";
            $this->assertEquals(
                PathResolver::SCOPE_GLOBAL,
                $this->object->getScope($path),
                "Check SCOPE_GLOBAL ['${path}']"
            );
        }


        /**
         * @covers Terrific\ExporterBundle\Service\PathResolver::resolve
         */
        public function testResolve()
        {
            $this->object->setModules(array('Test'));

            //
            // Images (Module)
            //
            $file = "http://www.test.de/terrificmoduletest/resources/public/img/imagefile.png";
            $this->assertEquals(
                "/img/Test/imagefile.png",
                $this->object->resolve($file),
                "Cannot resolve path ['${file}']"
            );

            //
            // Images (Common)
            //
            $file = "http://www.test.de/terriletest/resources/public/img/imagefile.png";
            $this->assertEquals(
                "/img/common/imagefile.png",
                $this->object->resolve($file),
                "Cannot resolve path ['${file}']"
            );

            //
            // Views (Common)
            //
            $file = "http://www.google.de/test/test.html";
            $this->assertEquals(
                "/views/test.html",
                $this->object->resolve($file),
                "Cannot resolve path ['${file}']"
            );

            $file = "/web/bundles/terrificmoduletest/view.html";
            $this->assertEquals(
                "/views/Test/view.html",
                $this->object->resolve($file),
                "Cannot resolve path ['${file}']"
            );

            $file = "/web/js/dependencies/blubb.js";
            $this->assertEquals(
                "/js/dependencies/blubb.js",
                $this->object->resolve($file),
                "Cannot resolve path ['${file}']"
            );

            $file = "/web/css/dependencies/dpblubb.css";
            $this->assertEquals(
                "/css/dependencies/dpblubb.css",
                $this->object->resolve($file),
                "Cannot resolve path ['${file}']"
            );

        }
    }
}
